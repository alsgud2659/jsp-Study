Ajax(Asynchronous Javascript and XML)
	빠르게 동작하는 동적인 웹 페이지를 만들기 위한 개발 기법이다.
	Ajax는 웹 페이지 전체를 다시 로딩하지 않고도, 웹 페이지 일부분만을 갱신할 수 있고
	백그라운드 영역에서 서버와 통신하여, 그 결과를 웹 페이지의 일부분에만 표시할 수 있다.
	이 때 서버와 아래와 같은 데이터를 주고 받을 수 있다.
	- JSON
	- XML
	- HTML
	- 텍스트 파일 등

Ajax의 장점
	1. 웹 페이지 전체를 다시 로딩하지 않고도, 웹 페이지의 일부분만을 갱신할 수 있다.
	2. 웹 페이지가 로드된 후에 서버로 데이터 요청을 보내거나 받을 수 있다.
	3. 다양한 UI(동적 페이지)구현이 가능해진다.

Ajax의 단점
	1. 페이지 이동이 없기 때문에 히스토리 관리가 안된다.
	2. 반복적인 데이터를 요청하면 느려지거나 작동하지 않게 됩니다(pending).
	3. 페이지의 이동이 없다는 것은 보안상의 문제도 발생할 수 있다는 것이다.

Ajax 구성 요소
	- 웹 페이지의 표현을 위한 HTML과 CSS
	- 데이터에 접근하거나 화면 구성을 동적으로 조작하기 위해 사용되는 DOM 모델
	- 데이터 교환을 위한 JSON이나 XML
	- 웹 서버와의 비동기 통신을 위한 XMLHttpRequest 객체
	- 위에서 언급한 모든 기술을 결합하여 사용자의 작업 흐름을 제어하는 데 사용되는 자바스크립트

XMLHttpRequest 객체
	Ajax의 가장 핵심적인 구성 요소는 바로 XMLHttpRequest 객체이다.
	Ajax에서 XMLHttpRequest 객체는 웹 브라우저가 서버와 데이터를 교환할 때 사용된다.
	웹 브라우저가 백그라운드에서 계속 서버와 통신할 수 있는 것은 바로 이 객체를 사용하기 때문이다.

XMLHttpRequest 객체 생성
	var 객체명 = new XMLHttpRequest();

서버에 요청하기
	Ajax에서는 XMLHttpRequest객체를 사용하여 서버와 데이터를 교환한다.
	따라서 서버에 요청을 보내기 위해서는 객체를 생성해야 하고, 객체의 open()메소드와
	send()메소드를 사용하여 요청을 보낼 수 있다.

open()
	서버로 보낼 Ajax 요청 형식을 설정한다.
	open(전달방식, URL, 동기 여부);
	
	전달방식 : GET, POST 등 요청 방식 작성
	URL : 요청을 처리할 서버의 파일 주소 전달
	동기 여부 : 요청을 동기식(false)으로 전달할 지, 비동기식(true)으로 전달할 지를 선택

send()
	작성된 Ajax 요청을 서버로 전달.
	전달방식에 따라서 인수를 가질 수도, 가지지 않을 수도 있다.

	GET방식 : send();
	POST방식 : send(전송할 데이터의 전달 방식에 맞추어 작성)

setRequestHeader()
	POST 방식에서 전달할 데이터의 방식(타입)을 설정한다.
	setRequestHeader("Content-Type", "전달할 데이터의 방식");

Ajax 요청 시 XMLHttpRequest 객체는 각 상태별로 readyState가 변한다.
처음에는 readyState가 0(객체명.UNSENT, 보내지 않음)이었다가, open()를 호출하면
1(객체명.OPEND)로 바뀌고 send() 호출 시 순차적으로 2(객체명.HEADERS_RECEIVED),
3(객체명.LOADING), 4(객체명.DONE)로 바뀐다.
최종적으로 readyState가 4가 된다면, 상태코드(객체명.status)가 성공을 의미하는
200, 201일 때 응답을 확인해야 한다.










